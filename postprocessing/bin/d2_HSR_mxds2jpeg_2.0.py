## export all mxds within a folder to jpg files of the same name (resolution = 300 dpi)

import arcpy
import os
import sys

BIN_DIR = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0,BIN_DIR)
import my_utilities_NFSEG as myut


# Set some reference values according to the ReferenceDefinitions class
#-------------------------------------------
MyDef = myut.ReferenceDefinitions()


# Set ArcGIS file format version
ARCFILEVERSION = MyDef.ArcCFileVersion

# DIR for the GIS Map Templates
TEMPLATEDIR = MyDef.GisTemplateDIR
#-------------------------------------------


print("Exporting jpeg maps related to Hydrostratigraphic Related(HSR): L1 thru L7 Elevations and Thickness, Elevation FWSW TDS 10,000ppm.")


# xoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxox
#
# Setup PATHs and filenames
#
# xoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxox

# Get the working PATHs
cpath_py, cpath_py_upper, cpath_py_base = myut.get_current_PATHs()

print("current directory: " + str(cpath_py))
print("parent directory: " + str(cpath_py_upper))
print("grandparent directory: " + str(cpath_py_base))


# Check and Create sub-directories as needed
#-------------------------------------------

# Sub-directory called /figures
dir_figs = os.path.join(cpath_py, "figures")
if not os.path.exists(dir_figs):
    os.makedirs(dir_figs)
else:
    print('\nWARNING: subdirectory "figures" already exists - \n' +
          '\t existing files with the same name as those updated ' +
          'in this script will be overwritten!\n')
# END IF


# Sub-directory called /GIS
dir_GIS = os.path.join(cpath_py, "GIS")
if not os.path.exists(dir_GIS):
    os.makedirs(dir_GIS)
else:
    print('\nWARNING: subdirectory "GIS" already exists - \n' +
          '\t existing files with the same name as those updated ' +
          'in this script will be overwritten!\n')
# END IF
#-------------------------------------------


# Find PEST optimal parameters output file (*.pst) in the parent directory
# and get the basename to attach to output files generated by this script
simnam = myut.get_unique_filebasename_from_suffix(cpath_py_upper,'.pst')
print("sim name: " + str(simnam))


gdb = os.path.join(cpath_py, simnam + ".gdb")
if arcpy.Exists(gdb):
    print('geodatabase for this sim exists - continuing\n')
    #arcpy.Delete_management(gdb)#temp action for debugging
    #arcpy.CreateFileGDB_management(dir_sim_proc,simnam,"CURRENT")
    #exit()
else:
    #arcpy.CreateFileGDB_management(cpath_py,simnam+"_ZB", ARCFILEVERSION)
    errmsg = 'ERROR: geodatabase for this sim does not exist - stopping - run earlier scripts'
    raise Exception(errmsg)
# END IF
# ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo



# xoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxox
#
# Create Maps
#
# xoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxox

#automatic figures right from the templates_gdb - no updates
mxdnames = ["HSR_Map3_Elevation_TDSConcentration_Iso-Surface.mxd",
            "HSR_Map21_Map_Vertical_CrossSections.mxd",
            "HSR_Map22_Hydrostratigraphic_CrossSection_A-Aprime.mxd",
            "HSR_Map23_Hydrostratigraphic_CrossSection_B-Bprime.mxd",
            "HSR_Map24_Hydrostratigraphic_CrossSection_C-Cprime.mxd",
            "HSR_Map24a_Hydrostratigraphic_CrossSection_E-Eprime.mxd",
            "HSR_Map25_Hydrostratigraphic_CrossSection_D-Dprime.mxd",
            "HSR_Map26_Areas_IntermediateConfiningUnitPresence.mxd"]

for mxdname in mxdnames:
    print("Creating " + mxdname)
    mxd = arcpy.mapping.MapDocument(TEMPLATEDIR + mxdname)
    arcpy.mapping.ExportToJPEG(mxd, (dir_figs + '/' + mxdname[:-3] + 'jpg'), resolution=300)
    mxd.saveACopy(os.path.join(dir_GIS, mxdname), ARCFILEVERSION)



# -- Figures to be updated with model data --
# Define a dictionary array of the mxdnames and their
# associated Layer that need modification
MapFigures = {
0: { 'mxdname': 'HSR_Map4_TopElevation_L1_FT.mxd', 'LyrName': 'Top', 'LyrIndex': 3 },
1: { 'mxdname': 'HSR_Map5_BottomElevation_L1_FT.mxd', 'LyrName': 'Bott', 'LyrIndex': 4 },
2: { 'mxdname': 'HSR_Map6_Thickness_L1_FT.mxd', 'LyrName': 'Layer', 'LyrIndex': 5 },
3: { 'mxdname': 'HSR_Map7_BottomElevation_L2_FT.mxd', 'LyrName': 'Bott', 'LyrIndex': 4 },
4: { 'mxdname': 'HSR_Map8_Thickness_L2_FT.mxd', 'LyrName': 'Layer', 'LyrIndex': 5 },
5: { 'mxdname': 'HSR_Map9_BottomElevation_L3_FT.mxd', 'LyrName': 'Bott', 'LyrIndex': 4 },
6: { 'mxdname': 'HSR_Map10_Thickness_L3_FT.mxd', 'LyrName': 'Layer', 'LyrIndex': 5 },
7: { 'mxdname': 'HSR_Map11_BottomElevation_L4_FT.mxd', 'LyrName': 'Bott', 'LyrIndex': 4 },
8: { 'mxdname': 'HSR_Map12_Thickness_L4_FT.mxd', 'LyrName': 'Layer', 'LyrIndex': 5 },
9: { 'mxdname': 'HSR_Map13_BottomElevation_L5_FT.mxd', 'LyrName': 'Bott', 'LyrIndex': 4 },
10: { 'mxdname': 'HSR_Map14_Thickness_L5_FT.mxd', 'LyrName': 'Layer', 'LyrIndex': 5 },
11: { 'mxdname': 'HSR_Map15_TopElevation_L6_FT.mxd', 'LyrName': 'Top', 'LyrIndex': 3 },
12: { 'mxdname': 'HSR_Map16_BottomElevation_L6_FT.mxd', 'LyrName': 'Bott', 'LyrIndex': 4 },
13: { 'mxdname': 'HSR_Map17_Thickness_L6_FT.mxd', 'LyrName': 'Layer', 'LyrIndex': 5 },
14: { 'mxdname': 'HSR_Map18_TopElevation_L7_FT.mxd', 'LyrName': 'Top', 'LyrIndex': 3 },
15: { 'mxdname': 'HSR_Map19_BottomElevation_L7_FT.mxd', 'LyrName': 'Bott', 'LyrIndex': 4 },
16: { 'mxdname': 'HSR_Map20_Thickness_L7_FT.mxd', 'LyrName': 'Layer', 'LyrIndex': 5 }
}



# Loop through each of the Figures that need updating
#------------------------------
for i in range(len(MapFigures)):
    
    # Capture the values from the dictionary
    cur_mxdname = MapFigures[i]['mxdname']
    cur_LayerName = MapFigures[i]['LyrName']
    cur_LayerIndex = MapFigures[i]['LyrIndex']
    
    print("Creating " + cur_mxdname)
    
    mxd = arcpy.mapping.MapDocument(TEMPLATEDIR + cur_mxdname)
    
    lyrList = arcpy.mapping.ListLayers(mxd)
    
    for i,lyr in enumerate(lyrList):
        if lyr.name[:cur_LayerIndex] == cur_LayerName:
            arcpy.mapping.Layer.replaceDataSource(lyr,gdb,"FILEGDB_WORKSPACE",'nfseg_props')
    # End for loop over lyr
    
    arcpy.mapping.ExportToJPEG(mxd, (dir_figs + '/' + cur_mxdname[:-3] + 'jpg'), resolution=300)
    mxd.saveACopy(os.path.join(dir_GIS, mxdname), ARCFILEVERSION)
#------------------------------
