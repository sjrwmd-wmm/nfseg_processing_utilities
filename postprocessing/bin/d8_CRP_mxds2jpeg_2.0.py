## export all mxds within a folder to jpg files of the same name (resolution = 300 dpi)

import arcpy
import os
import sys

BIN_DIR = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0,BIN_DIR)
import my_utilities_NFSEG as myut


# Set some reference values according to the ReferenceDefinitions class
#-------------------------------------------
MyDef = myut.ReferenceDefinitions()


# Set ArcGIS file format version
ARCFILEVERSION = MyDef.ArcCFileVersion

# DIR for the GIS Map Templates
TEMPLATEDIR = MyDef.GisTemplateDIR
#-------------------------------------------


print("Exporting jpeg maps related to Calibration Results Parameters(CRP): Transmissivity, Leakance and Hydraulic Conductivity.")


# xoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxox
#
# Setup PATHs and filenames
#
# xoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxox

# Get the working PATHs
cpath_py, cpath_py_upper, cpath_py_base = myut.get_current_PATHs()

print("current directory: " + str(cpath_py))
print("parent directory: " + str(cpath_py_upper))
print("grandparent directory: " + str(cpath_py_base))

# Check and Create sub-directories as needed
#-------------------------------------------

# Sub-directory called /figures
dir_figs = os.path.join(cpath_py, "figures")
if not os.path.exists(dir_figs):
    os.makedirs(dir_figs)
else:
    print('\nWARNING: subdirectory "figures" already exists - \n' +
          '\t existing files with the same name as those updated ' +
          'in this script will be overwritten!\n')
# END IF


# Sub-directory called /GIS
dir_GIS = os.path.join(cpath_py, "GIS")
if not os.path.exists(dir_GIS):
    os.makedirs(dir_GIS)
else:
    print('\nWARNING: subdirectory "GIS" already exists - \n' +
          '\t existing files with the same name as those updated ' +
          'in this script will be overwritten!\n')
# END IF
#-------------------------------------------

# Find PEST optimal parameters output file (*.pst) in the parent directory
# and get the basename to attach to output files generated by this script
simnam = myut.get_unique_filebasename_from_suffix(cpath_py_upper,'.pst')
print("sim name: {}".format(simnam))


gdb = os.path.join(cpath_py, simnam+".gdb")
if arcpy.Exists(gdb):
    print('geodatabase for this sim exists - continuing\n')
    #arcpy.Delete_management(gdb)#temp action for debugging
    #arcpy.CreateFileGDB_management(dir_sim_proc,simnam,"CURRENT")
    #exit()
else:
    #arcpy.CreateFileGDB_management(cpath_py,simnam+"_ZB", ARCFILEVERSION)
    errmsg = 'ERROR: geodatabase for this sim does not exist - stopping - run earlier scripts'
    raise Exception(errmsg)

gdbZB = os.path.join(cpath_py, simnam+"_ZB.gdb")
if arcpy.Exists(gdbZB):
    print('Zonebudget geodatabase for this sim exists - continuing\n')
    #arcpy.Delete_management(gdb)#temp action for debugging
    #arcpy.CreateFileGDB_management(dir_sim_proc,simnam,"CURRENT")
    #exit()
else:
    #arcpy.CreateFileGDB_management(cpath_py,simnam+"_ZB", ARCFILEVERSION)
    errmsg = 'ERROR: Zonebudget geodatabase for this sim does not exist - stopping - run earlier scripts'
    raise Exception(errmsg)
# ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo



# xoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxox
#
# Create Maps
#
# xoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxox

mxds = ["CRP_Map131_Modeled_DistributionHHC_FeetperDay_Model_L1.mxd",
        "CRP_Map132_Modeled_DistributionHHC_FeetperDay_Model_L3.mxd",
        "CRP_Map133_Modeled_DistributionHHC_FeetperDay_Model_L5.mxd",
        "CRP_Map134_Modeled_DistributionHHC_FeetperDay_Model_L7.mxd",
        "CRP_Map140_Modeled_DistributionLeakance_perDay_Model_L2.mxd",
        "CRP_Map141_Modeled_DistributionLeakance_perDay_Model_L4.mxd",
        "CRP_Map137_Modeled_DistributionVHC_FeetperDay_Model_L2.mxd",
        "CRP_Map138_Modeled_DistributionVHC_FeetperDay_Model_L4.mxd",
        "CRP_Map139_Modeled_DistributionVHC_FeetperDay_Model_L6.mxd",
        "CRP_Map135_Spatial_Distribution_of_T_with_Selected_APT_Results_Feet_Squared_perDay_Model_L3.mxd",
        "CRP_Map136_Spatial_Distribution_of_T_with_Selected_APT_Results_Feet_Squared_perDay_Model_L5.mxd"]

for mxdname in mxds:
    mxd = arcpy.mapping.MapDocument(TEMPLATEDIR + mxdname)
    lyrList = arcpy.mapping.ListLayers(mxd)
    for lyr in lyrList:
        if lyr.name[:5]=="Model" or lyr.name[:8]=="Leakance":
            print ("updating layer " + lyr.name)
            arcpy.mapping.Layer.replaceDataSource(lyr,gdb,"FILEGDB_WORKSPACE","nfseg_props")
    print ("updating " + mxdname)
    arcpy.mapping.ExportToJPEG(mxd, dir_figs+'/'+mxdname[:-3]+'jpg', resolution=300)
    mxd.saveACopy(os.path.join(dir_GIS, mxdname), ARCFILEVERSION)


