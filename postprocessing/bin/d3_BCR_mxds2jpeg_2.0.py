## export all mxds within a folder to jpg files of the same name (resolution = 300 dpi)

import arcpy
import os
import sys

BIN_DIR = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0,BIN_DIR)
#PATH = (os.getcwd() + "\\" + "bin")
#sys.path.insert(0,PATH)

import my_utilities_NFSEG as myut


# Set some reference values according to the ReferenceDefinitions class
#-------------------------------------------
MyDef = myut.ReferenceDefinitions()


# Set ArcGIS file format version
ARCFILEVERSION = MyDef.ArcCFileVersion

# DIR for the GIS Map Templates
TEMPLATEDIR = MyDef.GisTemplateDIR
#-------------------------------------------


print("Exporting jpeg maps related to Boundary Condition Related (BCR): Active model boundary L3 thru 7, Recharge Rates, ET, Extinction Depths, Withdraws_Ag_PSCII_DSS.")


# Get the working PATHs
cpath_py, cpath_py_upper, cpath_py_base = myut.get_current_PATHs()

print("current directory: " + str(cpath_py))
print("parent directory: " + str(cpath_py_upper))
print("grandparent directory: " + str(cpath_py_base))


# Check and Create sub-directories as needed
#-------------------------------------------

# Sub-directory called /figures
dir_figs = (str(cpath_py) + "/figures")
if os.path.exists(dir_figs) == False:
    os.makedirs(dir_figs)
else:
    print('\nWARNING: subdirectory "figures" already exists - \n' +
          '\t existing files with the same name as those updated ' +
          'in this script will be overwritten!\n')
# END IF
#print("root directory for figures output: "+str(dir_XS))


# Sub-directory called /GIS
dir_GIS = (str(cpath_py) + "/GIS")
if os.path.exists(dir_GIS) == False:
    os.makedirs(dir_GIS)
else:
    print('\nWARNING: subdirectory "GIS" already exists - \n' +
          '\t existing files with the same name as those updated ' +
          'in this script will be overwritten!\n')
# END IF
#-------------------------------------------



# Find PEST optimal parameters output file (*.pst) in the parent directory
# and get the basename to attach to output files generated by this script
simnam = myut.get_unique_filebasename_from_suffix(cpath_py_upper,'.pst')
print("sim name: " + str(simnam))



gdb=cpath_py+"/"+simnam+".gdb"
if arcpy.Exists(gdb):
    print("geodatabase for this sim exists - continuing ")
    #arcpy.Delete_management(gdb)#temp action for debugging
    #arcpy.CreateFileGDB_management(dir_sim_proc,simnam,"CURRENT")
    #exit()
else:
    #arcpy.CreateFileGDB_management(cpath_py,simnam+"_ZB", ARCFILEVERSION)
    print("geodatabase for this sim does not exist - stopping - run earlier scripts")
    exit()


mxdnames_noupdate = ['BCR_Map27_Model_LateralBoundaries_L3.mxd',
            'BCR_Map28_Model_LateralBoundaries_L4.mxd',
            'BCR_Map29_Model_LateralBoundaries_L5.mxd',
            'BCR_Map30_Model_LateralBoundaries_L6.mxd',
            'BCR_Map31_Model_LateralBoundaries_L7.mxd',
            'BCR_Map32_NHDPlusV2_Flow-LineSub-Segments_RiverDrain-Package_Implementations.mxd',
            'BCR_Map33_PortionsNHD_Flowlines_Sub-Polygons_NFSEG_RiverPackage.mxd',
            'BCR_Map34_Gulf-of-Mexico_CoastalSwamps_RepresentedDrainPackage.mxd',
            'BCR_Map40_DistributionOf_Multi-AquiferWells.mxd',
            'BCR_Map41_DistributionOf_PSCIIWithdrawals_mgd_2001.mxd',
            'BCR_Map42_DistributionOf_PSCIIWithdrawals_mgd_2009.mxd',
            'BCR_Map43_DistributionOf_DSSWithdrawals_mgd.mxd',
            'BCR_Map44_DistributionOf_AgWithdrawals_mgd.mxd',
            'BCR_Map45_DistributionOf_Total_GW_WithdrawalsbyCounty_mgd_2001.mxd',
            'BCR_Map46_DistributionOf_Total_GW_WithdrawalsbyCounty_mgd_2009.mxd',
            'BCR_Map47_GroundwaterWithdrawals_by_County_and_Use_Type_mgd_2001.mxd',
            'BCR_Map48_GroundwaterWithdrawals_by_County_and_Use_Type_mgd_2009.mxd',
            'BCR_Map49_Location_RIBS_InjectionWells_Sinks_and_DrainageWells.mxd',
            'BCR_Map50_DistributionOf_SpecifiedHeads_by_GridCell.mxd']

for mxdname in mxdnames_noupdate:
    mxd = arcpy.mapping.MapDocument(TEMPLATEDIR + mxdname)
    arcpy.mapping.ExportToJPEG(mxd, (dir_figs + '/' + mxdname[:-3] + 'jpg'), resolution=300)
    mxd.saveACopy( (dir_GIS + '/' + mxdname), ARCFILEVERSION)

mxdnames_update_ETRCH = ['BCR_Map35_AssignedRechargeRates_ipy_2001.mxd',
                     'BCR_Map36_AssignedRechargeRates_ipy_2009.mxd',
                     'BCR_Map37_AssignedMaximumSaturatedET_Rates_ipy_2001.mxd',
                     'BCR_Map38_AssignedMaximumSaturatedET_Rates_ipy_2009.mxd',
                     'BCR_Map39_AssignedET_Extinction_Depths_FT.mxd']

for mxdname in mxdnames_update_ETRCH:
    mxd = arcpy.mapping.MapDocument(TEMPLATEDIR + mxdname)
    lyrList = arcpy.mapping.ListLayers(mxd)
    for lyr in lyrList:
        if lyr.name[:3]=="SIM":
            print ("Creating " + mxdname)
            arcpy.mapping.Layer.replaceDataSource(lyr,gdb,"FILEGDB_WORKSPACE",'nfseg_props_ETRCHinp')
            arcpy.mapping.ExportToJPEG(mxd, (dir_figs + '/' + mxdname[:-3] + 'jpg'), resolution=300)
            mxd.saveACopy( (dir_GIS + '/' + mxdname), ARCFILEVERSION)

mxdnames_update_props = ['BCR_Map39_AssignedET_Extinction_Depths_FT.mxd']
for mxdname in mxdnames_update_props:
    mxd = arcpy.mapping.MapDocument(TEMPLATEDIR + mxdname)
    lyrList = arcpy.mapping.ListLayers(mxd)
    for lyr in lyrList:
        if lyr.name[:3]=="SIM":
            print ("Creating " + mxdname)
            arcpy.mapping.Layer.replaceDataSource(lyr,gdb,"FILEGDB_WORKSPACE",'nfseg_props')
            arcpy.mapping.ExportToJPEG(mxd, (dir_figs + '/' + mxdname[:-3] + 'jpg'), resolution=300)
            mxd.saveACopy( (dir_GIS + '/' + mxdname), ARCFILEVERSION)
