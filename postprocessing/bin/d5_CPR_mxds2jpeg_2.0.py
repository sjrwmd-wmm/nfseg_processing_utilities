### export all mxds within a folder to jpg files of the same name (resolution = 300 dpi)
#
# Create CPR maps 69-75

import arcpy
import os
import sys

BIN_DIR = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0,BIN_DIR)
import my_utilities_NFSEG as myut


# Set some reference values according to the ReferenceDefinitions class
#-------------------------------------------
MyDef = myut.ReferenceDefinitions()


# Set ArcGIS file format version
ARCFILEVERSION = MyDef.ArcCFileVersion

# DIR for the GIS Map Templates
TEMPLATEDIR = MyDef.GisTemplateDIR
#-------------------------------------------


print("Exporting jpeg maps related to Calibration Parameter Related(CPR): Horizontal Heads, Vertical Heads and Head Multipliers for L2, L3 and L5.")


# xoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxox
#
# Setup PATHs and filenames
#
# xoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxox

# Get the working PATHs
cpath_py, cpath_py_upper, cpath_py_base = myut.get_current_PATHs()

print("current directory: {}".format(cpath_py))
print("parent directory: {}".format(cpath_py_upper))
print("grandparent directory: {}".format(cpath_py_base))


# Check and Create sub-directories as needed
#-------------------------------------------

# Sub-directory called /figures
dir_figs = os.path.join(cpath_py, "figures")
if not os.path.exists(dir_figs):
    os.makedirs(dir_figs)
else:
    print('\nWARNING: subdirectory "figures" already exists - \n' +
          '\t existing files with the same name as those updated ' +
          'in this script will be overwritten!\n')
# END IF


# Sub-directory called /GIS
dir_GIS = os.path.join(cpath_py, "GIS")
if not os.path.exists(dir_GIS):
    os.makedirs(dir_GIS)
else:
    print('\nWARNING: subdirectory "GIS" already exists - \n' +
          '\t existing files with the same name as those updated ' +
          'in this script will be overwritten!\n')
# END IF
#-------------------------------------------

# Find PEST optimal parameters output file (*.pst) in the parent directory
# and get the basename to attach to output files generated by this script
simnam = myut.get_unique_filebasename_from_suffix(cpath_py_upper,'.pst')
print("sim name: {}".format(simnam))


gdb = os.path.join(cpath_py, (simnam + '.gdb') )
if arcpy.Exists(gdb):
    print('geodatabase for this sim exists - continuing')
    #arcpy.Delete_management(gdb)#temp action for debugging
    #arcpy.CreateFileGDB_management(dir_sim_proc,simnam,"CURRENT")
    #exit()
else:
    #arcpy.CreateFileGDB_management(cpath_py,simnam+"_ZB", ARCFILEVERSION)
    errmsg = 'ERROR: geodatabase for this sim does not exist - stopping - run earlier scripts'
    raise Exception(errmsg)
# ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo



# xoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxox
#
# Create Maps
#
# xoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxoxox

# List the mappable CPR properties as: [figure name, layer name, data source name]
properties = [
        ['CPR_Map69_DistributionHHC_PP_Model_L1', "Model Layer 1", simnam+"_ppkx1_feet"],
        ['CPR_Map70_DistributionHHC_PP_Model_L3', "Model Layer 3", simnam+"_ppkx3_feet"],
        ['CPR_Map71_DistributionHHC_PP_Model_L7', "Model Layer 7", simnam+"_ppkx7_feet"],
        ['CPR_Map72_DistributionVHC_PP_Model_L6', "Model Layer 6", simnam+"_ppkz6_feet"],
        ['CPR_Map73_DistributionVHC_PP_and_VHC_PP_and_VHC_Multiplier_PP_Model_L2', "Model Layer 2", simnam+"_ppkz2_feet"],
        ['CPR_Map74_DistributionVHC_PP_and_VHC_PP_and_VHC_Multiplier_PP_Model_L4', "Model Layer 4", simnam+"_ppkz4_feet"],
        ["CPR_Map75_DistributionVHC_PP_and_VHC_Multiplier_PP_Model_L5", "Model Layer 5", simnam+"_ppkx5_feet"]
        ]


# Use Template mxd to create a map (and jpeg version) of each CPR property
for prop in properties:
    mxdname = (prop[0] + '.mxd')
    mxd = arcpy.mapping.MapDocument(TEMPLATEDIR + mxdname)
    lyrList = arcpy.mapping.ListLayers(mxd)
    for lyr in lyrList:
        if lyr.name[:13]==prop[1]:
            print (lyr.name)
            arcpy.mapping.Layer.replaceDataSource(lyr, gdb, "FILEGDB_WORKSPACE", prop[2])
    print ("updating {}".format(mxdname))
    arcpy.mapping.ExportToJPEG(mxd, os.path.join(dir_figs, (prop[0]+'.jpg')), resolution=300)
    mxd.saveACopy(os.path.join(dir_GIS, mxdname), ARCFILEVERSION)
#
# ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
